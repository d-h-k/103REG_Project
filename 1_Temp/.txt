#include <stddef.h>
#include "stm32f10x.h"
#include <string.h>
#include <stdlib.h>
 
uint32_t TimingDelay;
 
#define LED 4
#define Lo 28
#define Hi 57
uint8_t buf[LED*24+48] = {
    Hi,Hi,Hi,Hi,Hi,Hi,Hi,Hi,Lo,Lo,Lo,Lo,Lo,Lo,Lo,Lo,Lo,Lo,Lo,Lo,Lo,Lo,Lo,Lo, // Green
    Lo,Lo,Lo,Lo,Lo,Lo,Lo,Lo,Hi,Hi,Hi,Hi,Hi,Hi,Hi,Hi,Lo,Lo,Lo,Lo,Lo,Lo,Lo,Lo, // Red
    Lo,Lo,Lo,Lo,Lo,Lo,Lo,Lo,Lo,Lo,Lo,Lo,Lo,Lo,Lo,Lo,Hi,Hi,Hi,Hi,Hi,Hi,Hi,Hi, // Blue
    Hi,Hi,Hi,Hi,Hi,Hi,Hi,Hi,Hi,Hi,Hi,Hi,Hi,Hi,Hi,Hi,Hi,Hi,Hi,Hi,Hi,Hi,Hi,Hi, // White
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
};
 
void convert_color(uint32_t color, uint16_t led_no){ // GRB
    for(int i=0; i<24; i++){
        if(color&(1<<(23-i))) buf[led_no*24 + i] = Hi;
        else                  buf[led_no*24 + i] = Lo;
    }
}
 
void init_SYS_CLK(void){
    RCC_DeInit();
    FLASH->ACR|= 0x02;
    RCC->CIR  |= 0x00008000;                                 // Bit 11 HSERDYIE
    RCC->CR   |= 0x00080000;                                 // Bit 19 CSSON
    RCC->CR   |= 0x00050000; while(!(RCC->CR&0x00020000));   // Bit 16 HSEON, Bit 18 HSEBYP, Bit 17 HSERDY
    RCC->CFGR |= 0x00010000;                                 // Bit 16 PLLSRC: 1: HSE oscillator clock selected as PLL input clock
    RCC->CFGR |= 0x00000002;                                 // Bits 1:0 SW: 10: PLL selected as system clock
    RCC->CFGR |= 0x001C0000;                                 // Bits 21:18 PLLMUL: 0111: PLL input clock x 9
    RCC->CR   |= 0x01000000; while(!(RCC->CR&0x02000000));   // Bit 24 PLLON, Bit 25 PLLRDY
    RCC->CFGR |= 0x00000008;                                 // Bits 3:2 SWS: 10: PLL used as system clock
 
    SysTick->LOAD = 71999;  // (72MHz/1000)-1=71999
    SysTick->VAL  = 0;
    SysTick->CTRL = 0x07;  // Bit 0 ENABLE: Counter enable, Bit 1 TICKINT: SysTick exception request enable, Bit 2 CLKSOURCE: Clock source selection
}
 
void init_GPIO(void){
    RCC->APB2ENR = (1<<2);  // Bit 2 IOPAEN
    GPIOA->CRL   = (GPIOA->CRL&0xF0FFFFFF)|(11<<(6*4)); // 10: Alternate function output Push-pull, 11: Output mode, max speed 50 MHz
}
 
void TimingDelay_Decrement(void){
    if(TimingDelay) TimingDelay--;
}
 
void delay_ms(uint32_t count){
    TimingDelay = count;
    while(TimingDelay != 0);
}
 
void delay_us(uint32_t us){  // 72MHz
    if(us>1){
        uint32_t count=us*8-6;
        while(count--); 
    }
    else{
        uint32_t count=2;
        while(count--); 
    }
}
 
void init_TIM3(void){  // Output compare mode, PWM
    RCC->APB1ENR |= (1<<1); // Bit 1 TIM3EN
 
    TIM3->PSC   = 0;   // 13.89ns
    TIM3->ARR   = 89;  // 1250ns
    TIM3->CCR1  = 0;
    TIM3->DIER  |= (1<<9); // Bit 9 CC1DE: Capture/Compare 1 DMA request enable
    TIM3->CCMR1 |= (6<<4); // Bits 6:4 OC1M 011: Toggle, 110: PWM
    TIM3->CCER  |= (1<<0); // Bit 0 CC1E
    TIM3->CR2   |= (1<<3); // Bit 3 CCDS: Capture/compare DMA selection 1: CCx DMA requests sent when update event occurs
    TIM3->CR1   |= (1<<0); // Bit 0 CEN
}
 
void init_DMA(void){
    RCC->AHBENR |= (1<<0);  // Bit 0 DMA1EN
    uint32_t temp=0;
    temp |= (1<<4);  // Bit 4 DIR: Data transfer direction 1: Read from memory
    temp |= (0<<5);  // Bit 5 CIRC: Circular mode 0: Circular mode disabled
    temp |= (0<<6);  // Bit 6 PINC: Peripheral increment mode 0: Peripheral increment mode disabled
    temp |= (1<<7);  // Bit 7 MINC: Memory increment mode 1: Memory increment mode enabled
    temp |= (2<<8);  // Bits 9:8 PSIZE[1:0]: Peripheral size 10: 32-bits
    temp |= (0<<10); // Bits 11:10 MSIZE[1:0]: Memory size 00: 8-bits
    temp |= (2<<12); // Bits 13:12 PL[1:0]: Channel priority level 10: High
    temp |= (0<<15); // Bit 14 MEM2MEM: Memory to memory mode 0: Memory to memory mode disabled
    DMA1_Channel6->CCR = temp;
}
 
void start_DMA(void){
    DMA1_Channel6->CPAR  = (uint32_t)0x40000434; // TIM3_CCR1 address
    DMA1_Channel6->CMAR  = (uint32_t)&buf;
    DMA1_Channel6->CNDTR = LED*24+48; // buf size
    DMA1_Channel6->CCR |= (1<<0);     // Bit 0 EN: Channel enable 1: Channel enabled
    while(DMA1_Channel6->CNDTR > 0);
    DMA1_Channel6->CCR &=~(1<<0);
}
 
int main(void){
    init_SYS_CLK();
    init_GPIO();
    init_TIM3();
    init_DMA();
 
    start_DMA();
    delay_ms(3000);
 
    memset(buf, 0, LED*24+48);
 
    while(1){
        for(int i=0; i<LED; i++){
            convert_color(rand(), i);
        }
        start_DMA();
        delay_ms(100);
    }
}
